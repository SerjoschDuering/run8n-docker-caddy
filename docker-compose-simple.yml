version: "3.7"

services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - ${DATA_FOLDER}/caddy_config:/config
      - ${DATA_FOLDER}/caddy_config/Caddyfile:/etc/caddy/Caddyfile

  n8n:
    image: docker.n8n.io/n8nio/n8n:next
    restart: always
    ports:
      - "5678:5678"
    env_file:
      - .env        # your existing env file
      - .env-n8n-ai # new secrets file
    environment:
      - N8N_HOST=${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=24
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_REDIS_PASSWORD=dummy_password
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
    volumes:
      - /mnt/volume_fra1_01/n8n_data:/home/node/.n8n
      - ${DATA_FOLDER}/local_files:/files

  redis:
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    command: ["redis-server", "--requirepass", "dummy_password"]
    volumes:
      - /mnt/volume_fra1_01/redis_data:/data

  # ===========================================
  # SUPABASE DATABASE
  # ===========================================

  supabase_db:
    image: postgres:15.1-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: supabase_admin
      POSTGRES_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD}
    volumes:
      - /mnt/volume_fra1_01/supabase_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supabase_admin -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # WINDMILL DATABASE
  # ===========================================

  windmill_db:
    image: postgres:15.1-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:5434:5432"
    environment:
      POSTGRES_DB: windmill
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${WINDMILL_DB_PASSWORD}
    volumes:
      - /mnt/volume_fra1_01/windmill_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d windmill"]
      interval: 10s
      timeout: 5s
      retries: 5

  nocodb:
    image: nocodb/nocodb:latest
    restart: always
    expose:
      - "8080"
    volumes:
      - /mnt/volume_fra1_01/nocodb_data:/usr/app/data
    environment:
      - NC_AUTH_BASIC_USER=admin
      - NC_AUTH_BASIC_PASS=${NOCO_PASSWORD}

  qdrant:
    image: qdrant/qdrant
    restart: always
    expose:
      - "6333"
    volumes:
      - /mnt/volume_fra1_01/qdrant_storage:/qdrant/storage

  siyuan:
    image: b3log/siyuan
    restart: unless-stopped
    expose:
      - "6806"
    command:
      - "--workspace=/siyuan/workspace/"
      - "--accessAuthCode=${SIYUAN_AUTH_CODE}"
    volumes:
      - /mnt/volume_fra1_01/siyuan_data:/siyuan/workspace
    environment:
      - TZ=${GENERIC_TIMEZONE}
      - PUID=1000
      - PGID=1000
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # ===========================================
  # SUPABASE SERVICES
  # ===========================================

  supabase_kong:
    image: kong:2.8.1
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - /mnt/volume_fra1_01/supabase/kong:/var/lib/kong
    depends_on:
      supabase_auth:
        condition: service_healthy
      supabase_rest:
        condition: service_healthy
      supabase_realtime:
        condition: service_healthy
      supabase_storage:
        condition: service_healthy

  supabase_auth:
    image: supabase/gotrue:v2.143.0
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: https://supabase.${DOMAIN_NAME}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_admin:${SUPABASE_POSTGRES_PASSWORD}@supabase_db:5432/postgres?search_path=auth
      GOTRUE_SITE_URL: https://supabase.${DOMAIN_NAME}
      GOTRUE_URI_ALLOW_LIST: "*"
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_MAILER_AUTOCONFIRM: false
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: "/auth/v1/verify"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "/auth/v1/verify"
      GOTRUE_MAILER_URLPATHS_RECOVERY: "/auth/v1/verify"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/auth/v1/verify"
    depends_on:
      supabase_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      timeout: 5s
      interval: 5s
      retries: 3

  supabase_rest:
    image: postgrest/postgrest:v12.0.1
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://supabase_admin:${SUPABASE_POSTGRES_PASSWORD}@supabase_db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: 3600
    depends_on:
      supabase_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      timeout: 5s
      interval: 5s
      retries: 3

  supabase_realtime:
    image: supabase/realtime:v2.25.50
    restart: unless-stopped
    environment:
      PORT: 4000
      DB_HOST: supabase_db
      DB_PORT: 5432
      DB_USER: supabase_admin
      DB_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD}
      DB_NAME: postgres
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: ${SUPABASE_SECRET_KEY_BASE}
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: "false"
      DNS_NODES: "''"
    depends_on:
      supabase_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "printf \\0 > /dev/tcp/localhost/4000"]
      timeout: 5s
      interval: 5s
      retries: 3

  supabase_storage:
    image: supabase/storage-api:v0.46.4
    restart: unless-stopped
    environment:
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      POSTGREST_URL: http://supabase_rest:3000
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      DATABASE_URL: postgres://supabase_admin:${SUPABASE_POSTGRES_PASSWORD}@supabase_db:5432/postgres
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: s3
      GLOBAL_S3_BUCKET: ${DO_SPACES_BUCKET}
      REGION: ${DO_SPACES_REGION}
      AWS_ACCESS_KEY_ID: ${DO_SPACES_KEY}
      AWS_SECRET_ACCESS_KEY: ${DO_SPACES_SECRET}
      S3_ENDPOINT: https://${DO_SPACES_REGION}.digitaloceanspaces.com
      PUBLIC_URL: ${DO_SPACES_CDN_ENDPOINT}
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://supabase_imgproxy:5001
    depends_on:
      supabase_db:
        condition: service_healthy
      supabase_rest:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/status"]
      timeout: 5s
      interval: 5s
      retries: 3

  supabase_imgproxy:
    image: darthsim/imgproxy:v3.8.0
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENABLE_WEBP_DETECTION: ${IMGPROXY_ENABLE_WEBP_DETECTION}

  supabase_meta:
    image: supabase/postgres-meta:v0.80.0
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase_db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD}
    depends_on:
      supabase_db:
        condition: service_healthy

  supabase_studio:
    image: supabase/studio:20240326-5e5586d
    restart: unless-stopped
    environment:
      STUDIO_PG_META_URL: http://supabase_meta:8080
      POSTGRES_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: ${DEFAULT_ORGANIZATION_NAME}
      DEFAULT_PROJECT_NAME: ${DEFAULT_PROJECT_NAME}
      SUPABASE_URL: http://supabase_kong:8000
      SUPABASE_REST_URL: http://supabase_kong:8000/rest/v1/
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      supabase_meta:
        condition: service_started

  # ===========================================
  # WINDMILL SERVICES
  # ===========================================

  windmill_server:
    image: ghcr.io/windmill-labs/windmill:main
    restart: unless-stopped
    pull_policy: if_not_present
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgres://postgres:${WINDMILL_DB_PASSWORD}@windmill_db:5432/windmill?sslmode=disable
      - MODE=server
      - RUST_LOG=info
      - BASE_URL=https://windmill.${DOMAIN_NAME}
      # Optional S3 storage for large files/artifacts
      - S3_BUCKET=${DO_SPACES_BUCKET}
      - AWS_ACCESS_KEY_ID=${DO_SPACES_KEY}
      - AWS_SECRET_ACCESS_KEY=${DO_SPACES_SECRET}
      - S3_ENDPOINT=https://${DO_SPACES_REGION}.digitaloceanspaces.com
    depends_on:
      windmill_db:
        condition: service_healthy

  windmill_worker:
    image: ghcr.io/windmill-labs/windmill:main
    restart: unless-stopped
    pull_policy: if_not_present
    environment:
      - DATABASE_URL=postgres://postgres:${WINDMILL_DB_PASSWORD}@windmill_db:5432/windmill?sslmode=disable
      - MODE=worker
      - WORKER_GROUP=default
      - KEEP_JOB_DIR=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/volume_fra1_01/windmill/worker_cache:/tmp/windmill
    depends_on:
      windmill_db:
        condition: service_healthy

  windmill_worker_native:
    image: ghcr.io/windmill-labs/windmill:main
    restart: unless-stopped
    pull_policy: if_not_present
    environment:
      - DATABASE_URL=postgres://postgres:${WINDMILL_DB_PASSWORD}@windmill_db:5432/windmill?sslmode=disable
      - MODE=worker
      - WORKER_GROUP=native
      - DISABLE_NSJAIL=true
    depends_on:
      windmill_db:
        condition: service_healthy

  windmill_lsp:
    image: ghcr.io/windmill-labs/windmill-lsp:latest
    restart: unless-stopped
    pull_policy: if_not_present
    ports:
      - "127.0.0.1:3001:3001"

volumes:
  caddy_data:
    external: true